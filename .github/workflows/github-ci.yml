name: parallel-preprocessor
# adapted from: https://github.com/ScottishCovidResponse/Covid19_EERAModel/blob/dev/.github/workflows/eera.yml

on: [push]

env:
  PROJECT_NAME: "parallel-preprocessor"
  PROJECT_VERSION: "0.3-dev"
  MODULE_FOLDERS: "./src/"

jobs:
  build:
    name: "${{ matrix.os }} workflow"
    runs-on: ${{ matrix.os }}
    strategy:
        fail-fast: false
        matrix:
                os: ['ubuntu-20.04', 'ubuntu-18.04',  'macos-latest']
                # config: [{
                #             compiler: gcc,
                #             compilerpp: g++,
                #         },
                #         {
                #             compiler: clang,
                #             compilerpp: clang++,
                #         }
                #         ]

    steps:
    - uses: actions/checkout@v2

    - name: Install Dependencies ( Ubuntu 20.04)
      run: |
           sudo apt-get update
           #sudo apt-get upgrade
           sudo apt-get install -y  g++ cmake clang cppcheck similarity-tester flawfinder
           sudo apt-get install -y lcov htmldoc poppler-utils graphviz doxygen
           sudo apt-get install -y libtbb*-dev libocct-*-dev occt-misc python3-dev python3-pybind11
           sudo apt-get install -y libx11-dev libxmu-dev libxi-dev
      if: matrix.os == 'ubuntu-20.04'
      # ubuntu-20.04 has opencascade in official repo, PPA not needed, python3-pybind11 is also latest enough

    - name: Install Dependencies ( Ubuntu 18.04)
      run: |
           sudo add-apt-repository ppa:freecad-maintainers/freecad-stable
           sudo apt-get update
           #sudo apt-get upgrade
           sudo apt-get install -y libtbb*-dev libocct-*-dev occt-misc python3-dev
           sudo apt-get install -y  g++ cmake clang lcov cppcheck similarity-tester flawfinder clang-format clang-tidy
           sudo apt-get install -y  libx11-dev libxmu-dev libxi-dev
      if: matrix.os == 'ubuntu-18.04'

    - name: Install Brew and Dependencies ( Mac OS X )
      run : |
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
            brew update
            brew install  gcc
            #brew install  cppcheck lcov poppler htmldoc graphviz doxygen
            brew install  boost tbb opencascade
      if: matrix.os == 'macos-latest'
      # occt 7.4, tbb ,   it will also install header file, will install dependencies automatically?
      # assuming git cmake are available
      # it is not clear xwindows dev files are needed on macos

    - name: Compile on Linux
      # env:
      #         CC: ${{ matrix.config.compiler }}
      #         CXX: ${{ matrix.config.compilerpp }}
      run: |
        git submodule update --init --recursive
        mkdir build
        cd build
        cmake  -DCODE_COVERAGE=ON -DPython_EXECUTABLE=$(which python3) ..
        make 2>&1 | tee clang_tidy_build_results.log
        # packup source code into zip and show in release : https://github.com/ukaea/parallel-preprocessor/archive/dev.zip
      if:  matrix.os == 'ubuntu-20.04'  || matrix.os == 'ubuntu-18.04'
    
    - name: Compile on MacOS
      run: |
        git submodule update --init --recursive
        mkdir build
        cd build
        CC=gcc CXX=g++ cmake -DCMAKE_BUILD_NAME=Release ..
        make 2>&1 | tee clang_tidy_build_results.log
      if: matrix.os == 'macos-latest'

    - name: package and installation on Ubuntu
      working-directory: ${{ github.workspace }}/build
      run: |
        echo "start packaging in the folder $(pwd)"
        make package
        sudo dpkg -i ${{ env.PROJECT_NAME }}*
      if: matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-18.04'

    - name: package and installation on MacOS
      working-directory: ${{ github.workspace }}/build
      run: |
        echo "make package  in the folder $(pwd)"
        make package
      if: matrix.os == 'macos-latest'

    - name: Run unit tests
      working-directory: ${{ github.workspace }}/build
      run: |
       echo "start unit test in the folder:$(pwd)"
       if [ ! -f "run_all_tests.sh" ]; then cp ../scripts/run_all_tests.sh ./ ; fi
       sh run_all_tests.sh

    - name: Upload daily-built packages to Github Release
      working-directory: ${{ github.workspace }}/build
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: https://github.com/ukaea/parallel-preprocessor/releases/download/dev/${{ env.PROJECT_NAME }}-${{ env.PROJECT_VERSION }}-${{ matrix.os }}.deb
        # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. 
        # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./${{ env.PROJECT_NAME }}-${{ env.PROJECT_VERSION }}-${{ matrix.os }}.deb
        asset_name: ${{ env.PROJECT_NAME }}-${{ env.PROJECT_VERSION }}-${{ matrix.os }}.deb
        asset_content_type: application/zip
      if: matrix.os == 'ubuntu-20.04' || matrix.os == 'ubuntu-18.04'
  
    - name: Run Cpp Check Flawfinder  Sim C++ ( Ubuntu GCC Dev/Master )
      working-directory: ${{ github.workspace }}
      run: |
        echo "start code analysis in the folder:$(pwd)"
        cppcheck --language=c++ --std=c++17 --enable=all -DROOT_DIR=$PWD -v --xml --xml-version=2 ${{ env.MODULE_FOLDERS }} 2>&1 | tee build/cpp-check.xml
        flawfinder ${{ env.MODULE_FOLDERS }} | tee build/flawfinder.log
        sim_c++ -aR -o "build/sim_cpp.log" src/*
      if:  matrix.os == 'ubuntu-20.04' && ( github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' )

    - name: Build Doxygen Documentation ( Ubuntu GCC Dev/Master )
      working-directory: ${{ github.workspace }}
      run : |
            cd build
            make doc
            mv public ../doxygen
      if: matrix.os == 'ubuntu-20.04' && ( github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' )

    - name: Commit Doxygen files ( Ubuntu GCC Dev/Master )
      run: |
           git config --local user.email "action@github.com"
           git config --local user.name "GitHub Action"
           git add -f doxygen/*
           git commit -m "Updated Doxygen Documentation `date`"
      if: matrix.os == 'ubuntu-20.04'  && ( github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' )

    - name: Run GCov and LCov Code Coverage ( Ubuntu GCC Dev/Master )
      working-directory: ${{ github.workspace }}
      run : |
            cd build
            make coverage
      if:  matrix.os == 'ubuntu-20.04' && ( github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' )
    - name: Commit LCOV files ( Ubuntu GCC Dev/Master )
      working-directory: ${{ github.workspace }}
      run: |
           git add -f build/${{ env.PROJECT_NAME }}.coverage*
           git commit -m "Updated LCOV report `date`"
      if: matrix.os == 'ubuntu-20.04'  && ( github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' )

    - name: Convert CPPCheck to HTML and push ( Ubuntu GCC Dev/Master )
      working-directory: ${{ github.workspace }}
      run: |
          mkdir -p site/cppcheck
          cppcheck-htmlreport --title="${{ env.PROJECT_NAME }}" --file=build/cpp-check.xml --report-dir=site/cppcheck --source-dir=.
          git add -f site/cppcheck/*
          git commit -m "Added CPPCheck Output `date`"
      if: matrix.os == 'ubuntu-20.04' && ( github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' )
    - name: Build Website Files ( Ubuntu GCC Dev/Master )
      run: |
          python scripts/site_generation.py build/clang_tidy_build_results.log build/flawfinder.log build/sim_cpp.log
          git add -f site/*.html
          git add -f index.html
          git commit -m "Updated Website Output `date`"
      if: matrix.os == 'ubuntu-20.04' && ( github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' )
    - name: Push site changes to gh-pages ( Ubuntu GCC Dev/Master )
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: gh-pages
        force: true
      if: matrix.os == 'ubuntu-20.04' && ( github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main' )